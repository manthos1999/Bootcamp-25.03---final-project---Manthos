import Head from "next/head";
import {useEffect, useState} from "react";
import axios from "axios";


export default function ChatPage() {


    const [threads, setThreads] = useState(null)
    const [activeThreadId, setActiveThreadId] = useState(null);
    const [messages, setMessages] = useState([]);
    const [loadingMessages, setLoadingMessages] = useState(false);

    //When the component mounts, (when the Componend is rendered for the first time)
    useEffect(() => {

        console.log("ChatPage mounted");

        let token = localStorage.getItem("token");

        if (token == null) {
            window.location.href = "/login";
        }

       axios.get("http://localhost:8080/threads/user", {
            headers: {
                Authorization: `Bearer ${token}`
            }
       })
           .then(response => {
               console.log("Threads from server:", response.data)
               setThreads(response.data);
           })
           .catch(error =>  {
               console.error("Failed to fetch threads", error);
           })

    }, []);

    async function loadMessages(threadId) {
        setLoadingMessages(true);
        setActiveThreadId(threadId);
        try {
            const token = localStorage.getItem("token");
            const response = await fetch(`http://localhost:8080/messages/thread/${threadId}`, {
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                }
            });
            if (!response.ok) throw new Error("Failed to fetch messages");
            const data = await response.json();
            setMessages(Array.isArray(data) ? data : data.messages || []);
        } catch (error) {
            console.error("Error loading messages:", error);
            setMessages([]);
        } finally {
            setLoadingMessages(false);
        }
    }


    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="page-container">
                <header>
                    <div className="header-content">
                        <div className="header-brand">
                            <img src="./bootcamp-2025.03-logo.jpg" alt="Logo" className="header-logo"/>
                            <div className="header-title">Chat Application</div>
                        </div>
                        <div className="profile-dropdown">
                            <input type="checkbox" id="profile-toggle"/>
                            <label htmlFor="profile-toggle" className="profile-icon">JD</label>
                            <div className="dropdown-menu">
                                <a href="#">Profile</a>
                                <a href="#">Settings</a>
                                <a href="#">Logout</a>
                            </div>
                            <label htmlFor="profile-toggle" className="overlay"></label>
                        </div>
                    </div>
                </header>
                <div className="center-container">
                    <aside className="threads-list">
                        <h2>Threads</h2>
                        <div className="threads">
                            {threads && threads.map((thread) => (
                                <div
                                    key={thread.id}
                                    onClick={() => loadMessages(thread.id)}
                                    className={`thread-item ${thread.id === activeThreadId ? "active" : ""}`}
                                >
                                    {thread.title || thread.name}
                                </div>
                            ))}
                        </div>
                    </aside>
                    <main className="main-container">
                        <div className="chat-window">
                            {/* Model selector centered in chat */}
                            <div className="chat-model-select">
                                <select id="model-select">
                                    <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
                                    <option value="gpt-4">GPT-4</option>
                                    <option value="gpt-4-turbo">GPT-4 Turbo</option>
                                    <option value="custom-model">Custom Model...</option>
                                </select>
                            </div>
                            <div className="messages">
                                {messages.length === 0 ? (
                                    <div className="message bot">Select a thread to view messages</div>
                                ) : (
                                    messages.map((msg) => {
                                        const messageClass = msg.llmgenerated ? "bot" : "user";
                                        return (
                                            <div key={msg.id} className={`message ${messageClass}`}>
                                                {msg.content}
                                            </div>
                                        );
                                    })
                                )}
                            </div>


                            <div className="input-container">
                                <input type="text" placeholder="Type a message…"/>
                                <button>➤</button>
                            </div>
                        </div>
                    </main>
                </div>
                <footer>© 2025 Chat App, Inc.</footer>
            </div>
        </>
    );
}
